lexeme ---------- token

function ---------- keyword
convert1x ---------- identifier
( ---------- separator
fahr ---------- identifier
int ---------- keyword
) ---------- separator
{ ---------- separator
return ---------- keyword
5 ---------- integer
* ---------- operator
( ---------- separator
fahr ---------- identifier
- ---------- operator
32 ---------- integer
) ---------- separator
/ ---------- operator
9 ---------- integer
; ---------- separator
} ---------- separator
# ---------- separator
Int ---------- identifier
low ---------- identifier
, ---------- separator
high ---------- identifier
, ---------- separator
step ---------- identifier
; ---------- separator
# ---------- separator
get ---------- keyword
( ---------- separator
low ---------- identifier
, ---------- separator
high ---------- identifier
, ---------- separator
step ---------- identifier
) ---------- separator
; ---------- separator
while ---------- keyword
( ---------- separator
low ---------- identifier
<= ---------- operator
high ---------- identifier
) ---------- separator
{ ---------- separator
put ---------- keyword
( ---------- separator
low ---------- identifier
) ---------- separator
; ---------- separator
put ---------- keyword
( ---------- separator
convert1x ---------- identifier
( ---------- separator
low ---------- identifier
) ---------- separator
) ---------- separator
; ---------- separator
low ---------- identifier
= ---------- operator
low ---------- identifier
+ ---------- operator
step ---------- identifier
; ---------- separator
} ---------- separator
endwhile ---------- keyword

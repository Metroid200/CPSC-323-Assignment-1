lexeme ---------- token

def ---------- identifier
fib(n): ---------- invalid
if ---------- keyword
n ---------- identifier
== ---------- operator
0: ---------- invalid
return ---------- keyword
0.0 ---------- real
elif ---------- identifier
n ---------- identifier
== ---------- operator
1: ---------- invalid
return ---------- keyword
1 ---------- integer
else: ---------- invalid
return ---------- keyword
fib(n ---------- invalid
- ---------- operator
1) ---------- invalid
+ ---------- operator
fib( ---------- invalid
n ---------- identifier
- ---------- operator
2 ---------- integer
) ---------- separator
for ---------- identifier
i ---------- identifier
in ---------- identifier
range( ---------- invalid
10 ---------- integer
): ---------- invalid
print( ---------- invalid
fib( ---------- invalid
i ---------- identifier
) ---------- separator
) ---------- separator
if ---------- keyword
true ---------- keyword
: ---------- separator
print("It's ---------- invalid
true") ---------- invalid
else ---------- keyword
: ---------- separator
print("It's ---------- invalid
false") ---------- invalid
num ---------- identifier
= ---------- operator
5 ---------- integer
while ---------- keyword
num ---------- identifier
> ---------- operator
0: ---------- invalid
print(num) ---------- invalid
num ---------- identifier
-= ---------- invalid
1 ---------- integer
def ---------- identifier
multiply ---------- identifier
( ---------- separator
num1, ---------- invalid
num2 ---------- identifier
) ---------- separator
: ---------- separator
return ---------- keyword
num1 ---------- identifier
* ---------- operator
num2 ---------- identifier
result ---------- identifier
= ---------- operator
multiply(5, ---------- invalid
10) ---------- invalid
print(result) ---------- invalid
my_list ---------- identifier
= ---------- operator
[1, ---------- invalid
2, ---------- invalid
3, ---------- invalid
4, ---------- invalid
5] ---------- invalid
for ---------- identifier
i ---------- identifier
in ---------- identifier
my_list: ---------- invalid
if ---------- keyword
i ---------- identifier
% ---------- invalid
2 ---------- integer
== ---------- operator
0: ---------- invalid
print(i, ---------- invalid
"is ---------- invalid
even") ---------- invalid
else: ---------- invalid
print(i, ---------- invalid
"is ---------- invalid
odd") ---------- invalid
x ---------- identifier
= ---------- operator
10 ---------- integer
y ---------- identifier
= ---------- operator
5 ---------- integer
z ---------- identifier
= ---------- operator
x ---------- identifier
% ---------- invalid
y ---------- identifier
print(z) ---------- invalid
